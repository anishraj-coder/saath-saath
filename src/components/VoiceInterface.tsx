'use client';

import { useState, useEffect, useRef } from 'react';

interface VoiceInterfaceProps {
  onCommand: (command: string, data?: unknown) => void;
  isActive: boolean;
  language?: string;
}

export default function VoiceInterface({ onCommand, isActive, language = 'hi-IN' }: VoiceInterfaceProps) {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [isSupported, setIsSupported] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);

  useEffect(() => {
    // Check if speech recognition is supported
    const SpeechRecognition = (window as unknown as { SpeechRecognition?: typeof SpeechRecognition; webkitSpeechRecognition?: typeof SpeechRecognition }).SpeechRecognition || 
                              (window as unknown as { SpeechRecognition?: typeof SpeechRecognition; webkitSpeechRecognition?: typeof SpeechRecognition }).webkitSpeechRecognition;
    
    if (SpeechRecognition) {
      setIsSupported(true);
      recognitionRef.current = new SpeechRecognition();
      
      const recognition = recognitionRef.current;
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = language;

      recognition.onstart = () => {
        setIsListening(true);
      };

      recognition.onresult = (event: any) => {
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }

        setTranscript(finalTranscript || interimTranscript);

        if (finalTranscript) {
          processVoiceCommand(finalTranscript.toLowerCase().trim());
        }
      };

      recognition.onerror = (event: unknown) => {
        
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
      };

      recognition.onend = () => {
        setIsListening(false);
      };
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [language]);

  const processVoiceCommand = (command: string) => {
    console.log('Voice command:', command);

    // Hindi and English command patterns
    const commands = {
      // Navigation commands
      dashboard: ['dashboard', '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°', 'home', '‡§π‡•ã‡§Æ'],
      orders: ['orders', '‡§ë‡§∞‡•ç‡§°‡§∞', 'order', '‡§Ü‡§∞‡•ç‡§°‡§∞'],
      products: ['products', '‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü', '‡§∏‡§æ‡§Æ‡§æ‡§®', 'items'],
      groups: ['groups', '‡§ó‡•ç‡§∞‡•Å‡§™', '‡§∏‡§Æ‡•Ç‡§π', 'group buying'],
      
      // Action commands
      create_order: ['create order', '‡§®‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞', 'order create', '‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§ì'],
      join_group: ['join group', '‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•â‡§á‡§®', '‡§∏‡§Æ‡•Ç‡§π ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤', 'group join'],
      check_savings: ['savings', '‡§¨‡§ö‡§§', 'save money', '‡§™‡•à‡§∏‡•á ‡§¨‡§ö‡§æ‡§ì'],
      
      // Product commands
      onions: ['onions', '‡§™‡•ç‡§Ø‡§æ‡§ú', 'pyaz'],
      potatoes: ['potatoes', '‡§Ü‡§≤‡•Ç', 'aloo'],
      tomatoes: ['tomatoes', '‡§ü‡§Æ‡§æ‡§ü‡§∞', 'tamatar'],
      oil: ['oil', '‡§§‡•á‡§≤', 'tel'],
      flour: ['flour', '‡§Ü‡§ü‡§æ', 'atta'],
      
      // Quantity commands
      quantity: /(\d+)\s*(kg|‡§ï‡§ø‡§≤‡•ã|kilo|litre|‡§≤‡•Ä‡§ü‡§∞)/i,
      
      // Confirmation commands
      yes: ['yes', '‡§π‡§æ‡§Å', 'han', 'okay', '‡§†‡•Ä‡§ï ‡§π‡•à'],
      no: ['no', '‡§®‡§π‡•Ä‡§Ç', 'nahin', 'cancel', '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•ã'],
      
      // Help commands
      help: ['help', '‡§Æ‡§¶‡§¶', 'madad', 'how to', '‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç']
    };

    // Check for navigation commands
    for (const [action, patterns] of Object.entries(commands)) {
      if (Array.isArray(patterns) && patterns.some(pattern => command.includes(pattern))) {
        onCommand(action);
        speak(getResponseText(action));
        return;
      }
    }

    // Check for quantity commands
    const quantityMatch = command.match(commands.quantity);
    if (quantityMatch) {
      const quantity = parseInt(quantityMatch[1]);
      const unit = quantityMatch[2];
      onCommand('set_quantity', { quantity, unit });
      speak(`${quantity} ${unit} ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ`);
      return;
    }

    // Default response for unrecognized commands
    speak('‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡§π‡•á‡§Ç ‡§Ø‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è "help" ‡§ï‡§π‡•á‡§Ç‡•§');
  };

  const speak = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = language;
      utterance.rate = 0.8;
      utterance.pitch = 1;
      window.speechSynthesis.speak(utterance);
    }
  };

  const getResponseText = (action: string): string => {
    const responses: { [key: string]: string } = {
      dashboard: '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§ñ‡•ã‡§≤‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à',
      orders: '‡§ë‡§∞‡•ç‡§°‡§∞ ‡§™‡•á‡§ú ‡§ñ‡•ã‡§≤‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à',
      products: '‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à',
      groups: '‡§ó‡•ç‡§∞‡•Å‡§™ ‡§¨‡§æ‡§á‡§Ç‡§ó ‡§™‡•á‡§ú ‡§ñ‡•ã‡§≤‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à',
      create_order: '‡§®‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à',
      join_group: '‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
      check_savings: '‡§¨‡§ö‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à',
      help: '‡§Æ‡§¶‡§¶ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à'
    };
    
    return responses[action] || '‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à';
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setTranscript('');
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
    }
  };

  if (!isSupported) {
    return (
      <div className="voice-interface-fallback bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-yellow-800 text-sm">
          Voice commands not supported in this browser. Please use touch interface.
        </p>
      </div>
    );
  }

  if (!isActive) {
    return null;
  }

  return (
    <div className="voice-interface bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-sm font-medium text-gray-900">Voice Commands</h3>
        <div className="flex items-center space-x-2">
          <div className={`w-2 h-2 rounded-full ${isListening ? 'bg-red-500 animate-pulse' : 'bg-gray-300'}`}></div>
          <span className="text-xs text-gray-500">
            {isListening ? 'Listening...' : 'Ready'}
          </span>
        </div>
      </div>

      <div className="space-y-3">
        <button
          onClick={isListening ? stopListening : startListening}
          className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
            isListening 
              ? 'bg-red-500 text-white hover:bg-red-600' 
              : 'bg-blue-500 text-white hover:bg-blue-600'
          }`}
        >
          {isListening ? 'üõë Stop Listening' : 'üé§ Start Voice Command'}
        </button>

        {transcript && (
          <div className="bg-gray-50 rounded-lg p-3">
            <p className="text-sm text-gray-700">
              <strong>You said:</strong> {transcript}
            </p>
          </div>
        )}

        <div className="text-xs text-gray-500">
          <p className="font-medium mb-1">Try saying:</p>
          <ul className="space-y-1">
            <li>‚Ä¢ &quot;Dashboard&quot; or &quot;‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°&quot;</li>
            <li>‚Ä¢ &quot;Create order&quot; or &quot;‡§®‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞&quot;</li>
            <li>‚Ä¢ &quot;Show products&quot; or &quot;‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§ì&quot;</li>
            <li>‚Ä¢ &quot;5 kg onions&quot; or &quot;5 ‡§ï‡§ø‡§≤‡•ã ‡§™‡•ç‡§Ø‡§æ‡§ú&quot;</li>
            <li>‚Ä¢ &quot;Join group&quot; or &quot;‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•â‡§á‡§®&quot;</li>
            <li>‚Ä¢ &quot;Help&quot; or &quot;‡§Æ‡§¶‡§¶&quot;</li>
          </ul>
        </div>
      </div>
    </div>
  );
}