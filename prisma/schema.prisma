// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Vendor model for street food vendors
model Vendor {
  id                 String   @id @default(cuid())
  name               String
  phone              String   @unique
  stallLatitude      Float?
  stallLongitude     Float?
  stallAddress       String?
  verificationStatus String   @default("pending") // pending, verified, rejected
  creditLimit        Float    @default(0)
  totalSavings       Float    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  orders             Order[]
  groupMemberships   GroupMember[]
  
  @@map("vendors")
}

// Product catalog
model Product {
  id           String   @id @default(cuid())
  name         String
  category     String   // vegetables, spices, oil, flour, other
  unit         String   // kg, litre, piece
  basePrice    Float
  currentStock Int      @default(0)
  supplierId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  supplier     Supplier? @relation(fields: [supplierId], references: [id])
  bulkTiers    BulkPricingTier[]
  orderItems   OrderItem[]
  groupProducts GroupProduct[]
  
  @@map("products")
}

// Bulk pricing tiers for group buying
model BulkPricingTier {
  id                String  @id @default(cuid())
  productId         String
  minQuantity       Int
  pricePerUnit      Float
  discountPercentage Float
  
  // Relations
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("bulk_pricing_tiers")
}

// Supplier information
model Supplier {
  id        String   @id @default(cuid())
  name      String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  
  // Relations
  products  Product[]
  
  @@map("suppliers")
}

// Individual vendor orders
model Order {
  id            String   @id @default(cuid())
  vendorId      String
  totalAmount   Float
  paymentMethod String   // cash, credit, snpl
  status        String   @default("pending") // pending, grouped, confirmed, delivered
  groupId       String?
  createdAt     DateTime @default(now())
  deliveryTime  DateTime?
  
  // Relations
  vendor        Vendor       @relation(fields: [vendorId], references: [id])
  items         OrderItem[]
  group         BuyingGroup? @relation(fields: [groupId], references: [id])
  
  @@map("orders")
}

// Items within an order
model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  
  // Relations
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Group buying groups
model BuyingGroup {
  id           String   @id @default(cuid())
  totalValue   Float
  totalSavings Float
  status       String   @default("forming") // forming, confirmed, ordered, delivered
  deliverySlot DateTime
  createdAt    DateTime @default(now())
  
  // Relations
  members      GroupMember[]
  orders       Order[]
  products     GroupProduct[]
  
  @@map("buying_groups")
}

// Group membership tracking
model GroupMember {
  id       String @id @default(cuid())
  groupId  String
  vendorId String
  
  // Relations
  group    BuyingGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  vendor   Vendor      @relation(fields: [vendorId], references: [id])
  
  @@unique([groupId, vendorId])
  @@map("group_members")
}

// Products within a buying group
model GroupProduct {
  id            String @id @default(cuid())
  groupId       String
  productId     String
  totalQuantity Int
  unitPrice     Float
  totalSavings  Float
  
  // Relations
  group         BuyingGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])
  
  @@map("group_products")
}
